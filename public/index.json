
[{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/sample/","section":"Tags","summary":"","title":"Sample","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/users/","section":"Tags","summary":"","title":"Users","type":"tags"},{"content":"欢迎访问LNmint的博客\n本博客是作者随笔, 不做内容搬运工, 是工作经验的总结和提炼\nWisdom谈不上, 希望给你带来 Knowledge\n包括 IC/FPGA/Software/Hardware等的原创内容\n版权申明 如需转载请注明出处。 ","date":"3 March 2025","externalUrl":null,"permalink":"/","section":"欢迎访问LNmint的博客","summary":"","title":"欢迎访问LNmint的博客","type":"page"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/categories/ic/","section":"Categories","summary":"","title":"IC","type":"categories"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/tags/note/","section":"Tags","summary":"","title":"Note","type":"tags"},{"content":" 为什么要折腾Rime # 现在流行的输入法软件有搜狗、百度、微信、微软输入法等，但是这些输入法都有我不满意的地方。\n搜狗和百度输入法过于臃肿，附带了太多和输入无关的功能，不能导出明文词库，联网上传用户信息，我并不想要这样的功能，不想我输入的内容被他人查看。微信输入法的词库和配置保存在本地系统，但是没有提供备份词库的方式。微软输入法使用起来非常别扭，比如不支持tab翻页，好多词语和句子不能一次输出，总是要选字，而且我不适应它的内嵌编辑模式（单行模式）。\n我觉得输入法最大的资产就是自己日积月累的词库，而绝大多数输入法不提供个人词库导出明文词库的方式，大部分的仅提供加密词库导出，个别的不提供词库导出，这给用户迁移输入法软件制造了障碍。如果输入法提供明文文本的个人词库，即使格式不一样，也可以编辑变成需要的格式。\n选择什么样的输入法?\n我试用了不少输入法软件，发现一款开源的输入法基本满足了我的要求。它就是中州韵输入法，又叫RIME。RIME是一个免费开源的输入法引擎，小狼毫输入法是RIME输入法在Windows上的名称。它安装包很小，功能强大，可定制性高，不管是软件界面还是输入方案都能随心所欲地实现个性化功能。它不会主动上传你的个人词库到网络，又提供明文词库的备份方式。它可以简单到极致，只关注打字，也可以打扮地花里胡哨，添加各种功能。\n在Windows上部署 # 在windows上算是最简单的了, 我们先从简单的开始!\n首先, 下载一个Rime, 点击这里, 在windows上叫做Weasel\n安装后, 先不要使用, 因为词库和配置都是不全的, 自己折腾费时费力, 我们可以要下载一个 白霜词库(基于雾凇词库), 会变得so easy。\n白霜词库的github链接, 这里的release包有字库和配置, 稍微改改就可以使用了, 里面有基本说明, 我就不赘述了。\ngit clone --depth 1 https://github.com/gaboolic/rime-frost Rime\n现在就可以直接用了, 但是我们可以稍微改点东西:\n修改全角标点 # 全角标点在编程时体验极差, 尤其是全角的 逗号, 冒号, 长得完全一样, 句号反而能一眼看出来区别。我们可以自动已一下, 这也是Rime灵活的地方:\n打开 user floder中的 default.yaml , 做如下修改。\nhalf_shape:\r\u0026#39;,\u0026#39; : \u0026#39;,\u0026#39;\r\u0026#39;.\u0026#39; : \u0026#39;。\u0026#39;\r\u0026#39;\u0026lt;\u0026#39; : \u0026#39;《\u0026#39;\r\u0026#39;\u0026gt;\u0026#39; : \u0026#39;》\u0026#39;\r\u0026#39;/\u0026#39; : [ /, ÷ ]\r\u0026#39;?\u0026#39; : \u0026#39;?\u0026#39;\r\u0026#39;;\u0026#39; : \u0026#39;;\u0026#39;\r\u0026#39;:\u0026#39; : \u0026#39;:\u0026#39; 添加常用于 # 可以打开 custom_phrase.txt, 添加即可。 例如我想要输入\u0026quot;手机shouji\u0026quot;, 显示手机号\n13811381138\tshouji\nLua脚本实现一些复杂功能 # 白霜词库中包含了一些Lua脚本, key开箱即用。\n这里抛砖引玉, 例如我想要输入 \u0026ldquo;week\u0026rdquo; 时显示这周是从几号到几号, 效果如下图, 要如何实现呢?\n在 rime_frost.schema.yaml中, 添加需要触发的关键字\ndate_translator:\rweek: week # 星期自定义脚本 然后打开所对应的lua脚本, 我这里对应到 date_translate.lua, 添加下面函数\nfunction M.func(input, seg, env) if (input == M.week) then local current_time = os.time() local week_tab = {\u0026#39;日\u0026#39;, \u0026#39;一\u0026#39;, \u0026#39;二\u0026#39;, \u0026#39;三\u0026#39;, \u0026#39;四\u0026#39;, \u0026#39;五\u0026#39;, \u0026#39;六\u0026#39;} local text = week_tab[tonumber(os.date(\u0026#39;%w\u0026#39;, current_time) + 1)] local CurrWeekMonday = os.date(\u0026#34;%m.%d\u0026#34;, os.time({ year = os.date(\u0026#34;%Y\u0026#34;), month = os.date(\u0026#34;%m\u0026#34;), day = os.date(\u0026#34;%d\u0026#34;) - os.date(\u0026#34;%w\u0026#34;) + 1 })) local CurrWeekFriday = os.date(\u0026#34;%m.%d\u0026#34;, os.time({ year = os.date(\u0026#34;%Y\u0026#34;), month = os.date(\u0026#34;%m\u0026#34;), day = os.date(\u0026#34;%d\u0026#34;) - os.date(\u0026#34;%w\u0026#34;) + 5 })) yield_cand(seg, os.date(\u0026#34;第%W周\u0026#34;, current_time) .. \u0026#39;(\u0026#39; .. CurrWeekMonday .. \u0026#39;-\u0026#39; .. CurrWeekFriday .. \u0026#39;)\u0026#39;) 在不同程序中输入法的默认状态 # 这个有什么用呢, 例如我打开一个terminal, 我肯定是要输入英文, 这个可以实现吗?\n当然!!!\n只需要在 weasel.yaml中添加:\n# [app_options] # 针对特定应用的设置 app_options: cmd.exe: # 带 .exe 的进程名：Weasel 15.0 及之前版本须小写; PR #1049 合并后释出的版本大小写不敏感 ascii_mode: true # 英文模式 windowsterminal.exe: ascii_mode: true wt.exe: ascii_mode: true powershell.exe: ascii_mode: true git-bash.exe: ascii_mode: true 同步 # Rime身为全平台的输入法, 而且注重隐私的输入法, 是没办法自动同步的! 为了安全牺牲点便利也可以理解, 自己同步也很简单!\n只需要改一个文件 installation.yaml, 添加这两行, 这里我用 onedriver实现同步, 在 onedriver中新建一个 RimeSync文件夹\ninstallation_id: LNmint_labtop sync_dir: \u0026#34;C:\\\\Users\\\\LNmint\\\\OneDrive\\\\AppData\\\\RimeSync\u0026#34; 这样就可以愉快打字啦, 其他的功能请自行琢磨\n安卓 # Android比较麻烦, 一个是没有特别好用的输入App, 再一个由于 Android 11之后对App用户权限的管理, 导致文件读写非常麻烦。但不要紧, 我们不需要root也可以, 直接开始!!!\n输入App, 这里我选择 小企鹅输入法for android, 各大应用市场都可以下载。\n然后打开小企鹅, 在里面安装一个rime插件。\n接下来关键的来了, 如果不root, Android/Data 这个目录是第三方应用访问不了的, 很多文件管理器也不行, 读都不行! 但是MT文件管理器可以。\n我们将Windows里生成的一整套 白霜词库方案, 拷贝到 data/rime\n安卓同步 # 这个比较麻烦, 我们需要用小企鹅打开用户文件夹, 必需用小企鹅, 进入到 data/rime 文件夹, 然后编辑一下 installation.yaml 将路径改为我们有权限读写的, 这一步非常关键! 例如:\nsync_dir: \u0026quot;/storage/emulated/0/Documents/RimeSync\u0026quot;\n打开小企鹅, 切换到Rime输入方案, 然后点击同步, 这样你会发现一些文件会放到上面写的路径里。\n然后我们下载一个 FolderSync, 然后增加同步方案为 上述路径和Onedriver之间进行同步。这样就畅通无阻啦!\nFolderSync可以添加自动定期同步计划, 这样完全解放双手了。\n打开小企鹅, 点击 同步和 重新部署, 电脑和手机的配置和词库就全部同步了。\nLinux篇 # Linux这里和Windows差不多, 主要区别是有两种输入方案: Ibus和 fcitx5, 这里我选择前者。\n以 Debian为例, apt安装 ibus-rime, 可点击这里\n其他和Windows差不多, 在这个路径下导入配置文件\n~/.local/share/fcitx5/rime\n","date":"3 January 2025","externalUrl":null,"permalink":"/posts/rime%E5%85%A8%E5%B9%B3%E5%8F%B0%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/","section":"Posts","summary":"","title":"Rime全平台配置使用","type":"posts"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/tags/tech/","section":"Tags","summary":"","title":"Tech","type":"tags"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/tags/ipv6/","section":"Tags","summary":"","title":"IPv6","type":"tags"},{"content":" 前言 # 使用IPv6连接SSH, 这个问题可以很简单, 直接使用一条指令就可以完成\nssh username@your_server_IPv6\n也可以很复杂, 想要知其所以然, 就继续往下看吧\n什么是IPv6 # IPV4中的实现方法 # 先来看一下IPV4, 熟悉以太网结构的都知道, IPv6/IPV4这些都属与以太网架构中的IP层, 主要功能就是完成数据转发。\n那么如何将数据 frame 准确的发给特定的设备呢? 我们都知道, 每个设备有一个 MAC地址, 这个是由 MAC层定的, 数据从 MAC层发出(一般是集成在ASIC中的), 会经过 PHY层传输, PHY不光是我们简单理解的物理介质, 还涉及到 协商/打包 等工作, 类似与快递公司, PHY出来可能还要经过其他物理介质, 例如 transformer 等, 扯远了, 不熟悉网络协议的小伙伴可以看看相关资料。\n我们的 MAC地址是一个48bit长度的数据, 一般不会重复, 但是不好记忆和管理里, 以太网中的传输包括: 单播 / 组播 / 广播, 多播场景用MAC是没法区分的, 但是 IP就不一样了, 可以根据 子卡掩码和 IP很容易确定多播的对象是谁。\n但是, 我的 IP还是要和 MAC地址对应, 这就涉及到以太网中的 ARP协议\n但是, IPV4的地址比较少, 有些特殊地址不能用, 例如 xxx.xxx.xxx.255 网段的广播地址, 某些用于机构或者大型网络, 给小型用户本来就不多了, 而且地址不是按人头分的! 老美这种互联网先发国家又拿走剩下绝大部分。我们一般用户常用的是 192网段和 172网段, 这都实际上都是被挑剩下的。\nIPv6有什么优点 # 回到IPv6, 那么第一个, 也是最浅显直观的优点就是\n太多了, 根本用不完\nIPv6的长度128bit !!! 比IPV4的32bit多太多了, 比 MAC地址的48bit都要多的多, 现在每个设备基本有一个独立的 MAC地址, 更何况IPv6了。\n除此之外,\nIPv6地址配置、网络编号和网络路由更方便\n寻址架构的优化, 可以完成三种不同类型的传输：单播、任意播和组播\nIPV6的地址结构 # 组成 # 如果网络环境支持IP, 可以通过 ifconfig查看当前的IPV6地址。\nTips: 如果你不确定当前网络环境是否支持IPV6, 可以点击这里测试 这个IPV6地址可能是这样:\ninet 192.168.11.11 netmask 255.255.240.0 broadcast 192.168.11.11\rinet6 fe80:abcd:efff:f123:4567 prefixlen 64 scopeid 0x20 也有可能是:\ninet6 fe80::215:5dff:fed2:7d15 prefixlen 64 scopeid 0x20 其中:\ninet6后面的即是 IPV6地址, 各个字段的含义如下:\n再来看看具体的含义\n前缀: 要么你的单位通过网络策略阻断了与外界的 IPv6 通信，要么你看到的 IPv6 地址不是公网地址。任何以“::”“fc”“fd”或“fe”开头的地址都无法接入 IPv6 互联网 prefixlen代表前缀长度, 有多个类型, 如下表, 例如常用的就是64bit的prefixlen, 也可以写成 fe80:abcc:efff:f123::/64\n前缀长度 适用场景 32 RIR/NIR（区域/国家互联网注册机构）分配给有 ASN 的运营商、互联网公司、大型企业。是地址最小分配单元 40 运营商向有多个（256个以内）站点和数据中心的大型企业分配的前缀 44 运营商向有多个（16个以内）站点和数据中心的中型企业分配的前缀 48 运营商向中小客户分配的常见前缀长度。或大中企业内一个站点的前缀 56 宽带运营商给家庭用户和小微企业分配的最小前缀长度（最大子网大小） 64 末端设备子网，/64 是很多协议硬性要求的（IPv6 无广播风暴风险） 127 路由器点对点链路，此处不是为了节约地址而是防止一种资源耗尽型攻击 尽管在规则允许下可以任意分配IPV6地址, 但一般会遵循某一规范, 例如APNIC IPv6 地址分配方针\n在IPV6地址中, 为0的前导值可以省略, 例如: fe80:0001:0002:0003:a299:9bff:fe18:50d1 可以写成: fe80:1:2:3:a299:9bff:fe18:50d1\n如果有一长串0, 可以全部省略, 并用 :: 表示, 例如: fe80:0000:0000:0000:0299:9bff:fe18:50d1 可以写成: fe80::299:9bff:fe18:50d1\nIPV6地址包括以下三种类型:\n全球单播地址 （GUA）/ 本地唯一地址（ULA） 链路本地地址 任播播地址 警告: 不要暴露自己的 全球单播地址(GUA)/ 本地唯一地址(ULA), 否则路由器宣告(RA)报文会以多播形式明文传递出去, 彻彻底底的将你出卖, 别人就可以长驱直入控制你的设备了 ","date":"30 December 2024","externalUrl":null,"permalink":"/posts/%E4%BD%BF%E7%94%A8ipv6%E8%BF%9E%E6%8E%A5ssh/","section":"Posts","summary":"","title":"IPv6是什么","type":"posts"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/categories/tools/","section":"Categories","summary":"","title":"Tools","type":"categories"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/tags/%E4%BB%A5%E5%A4%AA%E7%BD%91/","section":"Tags","summary":"","title":"以太网","type":"tags"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/tags/nas/","section":"Tags","summary":"","title":"NAS","type":"tags"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":" 准备 # 首先, 需要准备一台主机安装Linux, 我使用的Linux发行版是Ubuntu最新的:\nUbuntu 24.04.1 LTS (Noble Numbat) 也适用于 Debian 12.0 当然, Debian 或者其他发行版也类似, Windows用户在WSL 2里操作也基本一致。\n配置 # 配置net-tools # 先打开terminal查看IP地址\nifconfig # 打印示例 inet 192.168.11.11 netmask 255.255.240.0 broadcast 192.168.11.11 inet6 fe80::abc:defff:f123:4567 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; 如果报错, 需要先安装\nsudo apt install net-tools Tips: apt和 apt-get都可以用, 两者用法也基本一致, 但从版本上来讲, 在Debian 8之后的版本(以及基于Debian的发行版, 例如Ubuntu), apt基本可以平替 apt-get 安装SSH # Ubuntu默认安装了SSH Client, 但是没有安装server, 直接执行:\nsudo apt install openssh-server sudo service ssh start 设置开机自启ssh服务\nsudo systemctl enable ssh 可以更改 /etc/ssh/sshd_config 来配置SSH的执行默认启动方式, 有兴趣可以输入以下命令查看manual:\nman sshd_config 例如, 这里我可以更改登录时显示的页面, 在 /etc/ssh/sshd_config 中添加一行:\nBanner /etc/ssh/example.net 在example.net中输入你想要显示的标语, 例如:\n# example.net\r_.-- ,.--.\r.\u0026#39; .\u0026#39; /\r| @ |\u0026#39;..--------._\r/ \\._/ \u0026#39;.\r/ .-.- \\\r( / \\ \\\r\\\\ \u0026#39;. | #\r\\\\ \\ -. /\r:\\ | )._____.\u0026#39; \\\r\u0026#34; | / \\ | \\ )\r| | | | | / 修改完后, 可以先看看配置是否有错误:\nsudo sshd -t -f /etc/ssh/sshd_config 没有问题的话, 我们就可以启动了\nsudo /etc/init.d/ssh start\n或者, 如果启动过了, 可以执行restart\nsudo service ssh restart\n现在, 你就可以使用 ssh user@ip 的方式远程登录了, 我这里用的是 MobaXterm\n免密登录 # 我们通过将主机的公钥上传到服务器来实现免密码登录\n首先在本地生成key\nssh-keygen -t rsa\n命令会生成两个文件: ~/.ssh/id_rsa 和 ~/.ssh/id_rsa.pub\n.pub为公钥, 打开能看到一串字符, 复制下来一会要用到。另一个是私钥, 属于是自己偷偷保管, 别人拿走就非常危险了。公/私钥这套机制在很多地方都会用到, 诸如登录/验证/软件防盗版等等, 非常有趣且有用的算法机制, 这里暂且按下不表。\n生成的公钥要传到服务器上, 那么怎么传呢?\n一种比较原始的办法就是, 手动将公钥内容发送到服务器的 authorized_keys 的文件中, 类似这样:\n$ cat ~/.ssh/id_rsa.pub | ssh user@remote-host 'cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys'\n当然也可以使用这个命令\nssh-copy-id -i ~/.ssh/id_rsa.pub user@remote-host\nroot用户登录 # 为了安全起见，众多的 FreeBSD默认情况下是不允许 root用户进行SSH远程登录的，需要进行以下操作才可以进行Root用户的ssh远程登录。\n首先vi编辑 /etc/ssh/sshd_config , 修改以下值:\nPermitRootLogin yes #允许root登录 PermitEmptyPasswords no #不允许空密码登录 PasswordAuthentication yes # 设置是否使用口令验证 配置完成后, 重新激活sshd服务即可\nsudo systemctl reload ssh IPV6登录 # 如果我的远程服务器和我的设备不在同一网段, 那么我们可以使用IPV6来进行登录, 可以参考我的另一篇博客: 使用IPV6登录SSH\n优化网络 # 用途不多说, 优化网络连接github方便些\nwget获取这两个包, 这里用的是 amd64, 不知道自己的CPU是什么架构的, 可以通过 uname -a 或者 arch命令查看\nwget https://github.com/Dreamacro/clash/releases/download/v1.11.12/clash-linux-amd64-v1.11.12.gz\nwget https://github.com/haishanh/yacd/releases/download/v0.3.8/yacd.tar.xz\n或git clone https://github.com/Elegycloud/clash-for-linux-backup.git clash-for-linux\n修改.env, 添加自己的订阅链接\n键入命令配置 proxy\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 或source这个脚本修改:\nsource /etc/profile.d/clash.sh 设置开机自启动\n在/etc/systemd/system目录新建一个文件:\nvim /etc/systemd/system/clash@.service 并添加一些内容:\n[Unit]\rDescription=A rule based proxy in Go for %i.\rAfter=network.target[Service]\rType=simple\rUser=%i\rRestart=on-abort\rExecStart=/usr/local/clash-for-linux/start.sh[Install]\rWantedBy=multi-user.target 执行以下命令设置开机启动, user为当前用户名:\nsystemctl daemon-reload\rsystemctl enable clash@user\rsystemctl start clash@user\rsystemctl status clash@user 安装rime # rime有两个版本, 一个是基于 ibus的, 一个是 fcitx5的, 这里使用前者。\nsudo apt install ibus-rime 其他工具 # 安装一些其他工具, 以优化Ubuntu/Debian\napt update apt -y install net-tools curl vim zip unzip yum supervisor wget nano gnupg gnupg2 gnupg1 apt -y install sudo apt install libcap2-bin docker安装 # ","date":"30 December 2024","externalUrl":null,"permalink":"/posts/ubuntu-24.04%E4%B8%8A%E6%90%AD%E5%BB%BAnas/","section":"Posts","summary":"","title":"Ubuntu 24.04上搭建NAS","type":"posts"},{"content":"","date":"26 December 2024","externalUrl":null,"permalink":"/tags/homeassistant/","section":"Tags","summary":"","title":"HomeAssistant","type":"tags"},{"content":"","date":"26 December 2024","externalUrl":null,"permalink":"/tags/iot/","section":"Tags","summary":"","title":"IoT","type":"tags"},{"content":"","date":"26 December 2024","externalUrl":null,"permalink":"/tags/opensource/","section":"Tags","summary":"","title":"OpenSource","type":"tags"},{"content":"","date":"26 December 2024","externalUrl":null,"permalink":"/categories/opensource/","section":"Categories","summary":"","title":"OpenSource","type":"categories"},{"content":" Xiaomi Home Assistant是什么 # 这是一个开源项目, 本质上是一个家庭 IoT设备的集成工具。实际上, 小米这个开源这个项目是基于另一个开源项目Home Assistant的二次开发。大家可以在Github里找到这两个开源项目: Xiaomi HS Xiaomi Home和 Home Assistant\n这个项目可谓得到广大 NAS和 IoT智能设备爱好者的追捧, githug上热度很高。当然这也是大势所趋, 现在很多电器都会带Wifi模块, 每个厂家的设备都给你开发一个APP, 最可恶的是, 每个厂家都对自己那点破数据敝帚自珍, 生怕让你知道控制设备发的什么命令。\n小米这一开源举动, 真的可谓是秦王扫六合的壮举, 至少将米家的所有智能设备控制接口都整合起来, 实乃广大爱折腾人士的福音。\n如何使用 # 准备步骤 # 前面说过小米的开源项目基于Home Assistant, 那么首先需要安装这个软件。可以点击这里安装\nHome Assistant 版本要求：\nCore $\\geq$ 2024.4.4 Operating System $\\geq$ 13.0 选择你需要安装的主体, 可以选择 树莓派, 手机, 或者 电脑\n我这里在电脑上安装, 选择这个\n然后,\n方法1 # 你可以选择在电脑上安装一个操作系统: HAOS\n那么, 装在虚拟机里行不行? 应该是可以的, 但是虚拟机要获取Hardware的访问权限, 一般VMware或者Hyper-V都是可以的, 这里我们选择直接刷机,\n需要改UBOOT的设置, 这里就不介绍了。\n装好之后可以看到是一个类似Ubuntu的系统, 按照步骤来即可。\n方法2 # 可以在现有系统上例如Ubuntu来通过Docker容器部署\n安装米家集成 # 接下来, 要基于 HA 进行定制, 接下来就是 git的基本操作了, 直接使用 clone下来安装\ncd config git clone https://github.com/XiaoMi/ha_xiaomi_home.git cd ha_xiaomi_home ./install.sh /config 目前已经有很多个版本了, checkout到对应的版本\n例如，更新米家集成版本至 v1.0.0\ncd config/ha_xiaomi_home git checkout v1.0.0 ./install.sh /config 配置 # 此部分按照官方的操作, 配置完就可以愉快的控制米家设备啦\n登录 # 设置 \u0026gt; 设备与服务 \u0026gt; 添加集成 \u0026gt; 搜索“Xiaomi Home” \u0026gt; 下一步 \u0026gt; 请点击此处进行登录 \u0026gt; 使用小米账号登录\n添加 MIoT 设备 # 登录成功后，会弹出会话框“选择家庭与设备”。您可以选择需要添加的米家家庭，该家庭内的所有设备将导入 Home Assistant 。\n多账号登录 # 用一个小米账号登录并配置完成后，您可以在 Xiaomi Home Integration 页面中继续添加其他小米账号。\n方法：设置 \u0026gt; 设备与服务 \u0026gt; 已配置 \u0026gt; Xiaomi Home \u0026gt; 添加中枢 \u0026gt; 下一步 \u0026gt; 请点击此处进行登录 \u0026gt; 使用小米账号登录\n修改配置项 # 在会话框“配置选项”中，可选择需要变更的配置项。您可以修改用户昵称或更新从米家 APP 导入的设备列表。\n方法：设置 \u0026gt; 设备与服务 \u0026gt; 已配置 \u0026gt; Xiaomi Home \u0026gt; 配置 \u0026gt; 选择需要变更的配置项\nAction 调试模式 # 开启该模式后，您可手动向设备发送带参数的 Action 控制指令。发送带参数的 Action 控制指令的用户入口显示为一个文本实体。\n方法：设置 \u0026gt; 设备与服务 \u0026gt; 已配置 \u0026gt; Xiaomi Home \u0026gt; 配置 \u0026gt; Action 调试模式\n","date":"26 December 2024","externalUrl":null,"permalink":"/posts/xiaomi-home-assistant%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/","section":"Posts","summary":"","title":"Xiaomi Home Assistant折腾笔记","type":"posts"},{"content":"","date":"25 December 2024","externalUrl":null,"permalink":"/tags/arm/","section":"Tags","summary":"","title":"ARM","type":"tags"},{"content":"https://blog.csdn.net/bukong123/article/details/134231895\n这里的JTAG是指符合IEEE 1149.1 JTAG的标准接口, 而非调试器\nJTAG标注架构 # 先来看看JTAG的Architecture digram\n有四个接口pin:\nTDI TDO TMS TCK TCK就是时钟, TMS是测试模式选择, TDI/TDO分别是数据的in/out\n这样看, 是不是和SPI挺像的, 其实区别很大!\n为什么呢, 这个要从用途讲起, JTAG是一种调试接口, 我的芯片可能要去封装多个die, 或者有连接多个芯片调试的需求, 但是一般只会有一个JTAG口, 这怎么办呢?\n在SPI中, 我可以通过 CS来选中某个设备, 如果有两个设备, 那就CS0/CS1, 但如果有100个设备呢。。。\n在JTAG中有另外一种更节省管脚的实现方式, 在某一个device的数据包会直接发给下一个, 下一个拼接完再发给下下一个, 连接方式的话就是 TDO连接下一个JTAG设备的 TDI, 依次成链, 可以参考下图\n其实这种思想在片内总线中也有应用, 例如片内的环形总线。\n硬件连接 # 就可以指导我们硬件连接了, TMS/TCK 这些信号按照菊花链的形式连接到所有device的JTAG, TDO和 TDI就按照首尾相接进行互联。\nZYNQ中的JTAG # ZYNQ里面包括PS和PL两部分, 二者都是有JTAG接口的。\n在官方的手册中, 可以看到, 我们可以配置ZYNQ为两种模式:\n独立模式(Independent) 级联模式(Cascade) 独立模式就是这两各占一个JTAG接口, 在ARM端这个接口叫做DAP, 在PL端这个叫做TAP\n级联模式就是将两者在内部连接在一起, 只暴露出一个接口。但是我们能扫到两个设备!\nJTAG调试器 # JTAG调试器里装的是什么, 起什么作用, 价格差很多的两个调试器有什么区别, 为什么有的里面是一个FPGA?\n其实根据上文, 已经能大概猜出JTAG调试器里的是什么了。\nJTAG调试器要实现的功能就是一个JTAG的控制器, 如果JTAG Device是Slave, 那么JTAG盒子就是Master。\n一般里面是一个ASIC芯片, 但是用FPGA也能实现。\n","date":"25 December 2024","externalUrl":null,"permalink":"/posts/jtag%E6%8E%A5%E5%8F%A3%E5%8D%8F%E8%AE%AE/","section":"Posts","summary":"","title":"JTAG接口协议","type":"posts"},{"content":"","date":"25 December 2024","externalUrl":null,"permalink":"/tags/%E5%8D%8F%E8%AE%AE/","section":"Tags","summary":"","title":"协议","type":"tags"},{"content":"","date":"24 December 2024","externalUrl":null,"permalink":"/tags/axi/","section":"Tags","summary":"","title":"AXI","type":"tags"},{"content":"","date":"24 December 2024","externalUrl":null,"permalink":"/posts/axi%E6%80%BB%E7%BA%BF/","section":"Posts","summary":"","title":"AXI总线","type":"posts"},{"content":"","date":"24 December 2024","externalUrl":null,"permalink":"/tags/bus/","section":"Tags","summary":"","title":"BUS","type":"tags"},{"content":"","date":"23 December 2024","externalUrl":null,"permalink":"/categories/hardware/","section":"Categories","summary":"","title":"Hardware","type":"categories"},{"content":"","date":"23 December 2024","externalUrl":null,"permalink":"/tags/memory/","section":"Tags","summary":"","title":"Memory","type":"tags"},{"content":"PCB设计师只Know How, 不能Know Why。 DDR 地址线\n","date":"23 December 2024","externalUrl":null,"permalink":"/posts/%E4%BB%8Emc%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%9C%8Bsdram%E7%9A%84phy%E6%8E%A5%E5%8F%A3-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1/","section":"Posts","summary":"","title":"从MC角度看看SDRAM的PHY接口-为什么要这样设计","type":"posts"},{"content":"","date":"23 December 2024","externalUrl":null,"permalink":"/tags/%E6%8E%A5%E5%8F%A3/","section":"Tags","summary":"","title":"接口","type":"tags"},{"content":"","date":"16 December 2024","externalUrl":null,"permalink":"/tags/fpga/","section":"Tags","summary":"","title":"FPGA","type":"tags"},{"content":"","date":"16 December 2024","externalUrl":null,"permalink":"/tags/ic/","section":"Tags","summary":"","title":"IC","type":"tags"},{"content":"纠错在计算机体系中非常常见, 在传输过程中以及存储过程中都有可能产生错误, 这其实非常常见。例如, 对于NAND Flash类型的存储介质(SD, EMMC, SSD等都属与这一类型), 通过在浮动栅极(floating gate)中存储电子来代表0和1, 在进行写或擦除等操作时, 电子会穿过浮动栅极, 而浮动栅极有个缺陷, 在电子反复穿过Floating Gate后, 电子存储的能力变弱, 那么所代表的0和1将不再可靠! 我们可以通过纠错算法来保证数据正确, 或磨损平衡的算法机制来提高整个存储介质的寿命和可靠性。当然我们这里不介绍磨损平衡。\n那么, 常用的纠错算法有哪些呢:\nECC # 在正式介绍ECC之前, 我们先来看看Check Sum(校验和)。Check Sum是一种检错机制, 这个非常简单, 应用也非常广, 例如经典的UART协议中8bit数据后可以附1bit校验和, 分为奇校验和偶校验。\n在UART中Check Sum可以检查出8bit中的1bit误码。但这只是检错, 我们无法知道8bit中哪一个地址是错的。试想一下, 如果每1bit data都有1bit Check, 那就可以完成纠错了!\n但这样太傻了, 这不就相当于复制了一份吗, 效率直接砍了一半?\n那么ECC是怎么做的呢, 我们拿一张带ECC的内存条看看, 图中是一个带ECC的DDR内存条, 可以看到共使用了9个8bit位宽的SDRAM内存颗粒, 也就是总共72bit位宽, 其中64bit用于数据, 8bit用于ECC。\nECC是如何用8bit来完成64bit数据的纠错的。这其实很好理解, 我们只需要知道是哪个bit出错, 那么8bit可以包含的地址信息就是2^8=64个。\n当然, 真正的ECC远不止这些, 要真正使用, 还需要考虑如何计算, 能否在和data同一拍时钟给Memory Controller, 怎么计算效率高, 用的资源少。我们先按下不表。\n那么基于上面的情况, 我们深入一下:\n有没有可能数据是对的, 但是Check Sum算错了呢!!!? 此时我该相信谁? 那如果是2bit错误呢, 上述利用Check Sum就无能为力了。 FEC # FEC也就是前向纠错,\n","date":"16 December 2024","externalUrl":null,"permalink":"/posts/%E5%87%A0%E7%A7%8D%E7%BA%A0%E9%94%99%E7%AE%97%E6%B3%95/","section":"Posts","summary":"","title":"几种纠错算法","type":"posts"},{"content":"","date":"16 December 2024","externalUrl":null,"permalink":"/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法","type":"tags"},{"content":"","date":"16 December 2024","externalUrl":null,"permalink":"/tags/%E7%BA%A0%E9%94%99/","section":"Tags","summary":"","title":"纠错","type":"tags"},{"content":"","date":"11 December 2024","externalUrl":null,"permalink":"/categories/coding/","section":"Categories","summary":"","title":"Coding","type":"categories"},{"content":"","date":"11 December 2024","externalUrl":null,"permalink":"/tags/verilog/","section":"Tags","summary":"","title":"Verilog","type":"tags"},{"content":" 关于状态机 # 作为HDL的最基础知识，状态机无疑是非常重要的。 我们平时可能会碰到很多状态机，例如从简单的pattern检测，到PCIe的LTSSM，其实本质是一样的，好的状态机清晰明了，也是我们debug的利器；差的状态机各有千秋，可以让设计者落泪，也可以让使用者红温。 那么，如何写一个状态机呢？\n首先我们要明白为什么要有状态机。 答案很简单，为了顺序执行！\n如果没有状态机，我可以怎么写呢： if （a） else if（b） else if （c） 是的，这样就完成了简单的顺序控制，b依赖a，c依赖b，一层一层传递，这样可以吗？当然可以！设计是为结果服务的，对于简单的设计来说，这就很明了了。但稍微复杂一点，这就不够看了，逻辑会越嵌套越多，并且他们之间都是耦合的！很容易出错！\n好了，我们介绍正经的状态机了。按照教科书的说法，一般状态机分为Moore状态机和Mealy状态机。 Moore状态机：输出仅仅与当前状态有关； Mealy状态机：输出不仅取决于当前状态，还和输入有关； 好家伙，一上来就整两名词。但是这个更不重要，大多数情况下我们不需要研究我们写的是哪种。\n那么，最关键的，根据写法，我们可以概括为： 一段式 两段式 三段式 这才是真正简介，见文生义，且实用的命名！\n","date":"11 December 2024","externalUrl":null,"permalink":"/posts/rtl%E5%9F%BA%E7%A1%80%E4%B9%8B-%E7%8A%B6%E6%80%81%E6%9C%BA/","section":"Posts","summary":"","title":"关于状态机","type":"posts"},{"content":"","date":"21 November 2024","externalUrl":null,"permalink":"/tags/pcie/","section":"Tags","summary":"","title":"PCIe","type":"tags"},{"content":" PCIe # Source: Kindle\n📒 本书总结 # PCIE\nPCIe层级架构\n复位\nhttps://adaptivesupport.amd.com/s/question/0D52E00006hpaAbSAI/pci-express-wake-and-perst?language=en_US\n复位时序和最小复位时间\nTraining\n在系统复位后，会自动进行链路训练，以达成以下目标：位锁定（Bit Lock）、字符锁定（Symbol Lock，Gen1 \u0026amp; Gen2 Only）、块锁定（Block Lock，Gen3 Only）、确定链路宽度（Link Width）、通道位置翻转（Lane Reversal）、信号极性翻转（Polarity Inversion）、确定链路的数据率（Data Rate）和通道对齐（Lane-to-Lane De-skew）等功能。\n首先是位锁定（Bit Lock）：\n前面的文章中提到过，PCIe总线采用了一种嵌入式时钟的机制，即发送端只向接收端发送数据信号，并不发送时钟信号（时钟信号隐藏在数据信号中）。接收端可以通过CDR（Clock and Data Recovery）逻辑将时钟从数据流中恢复出来，然后再用恢复出来的时钟对数据信号进行采样。当然，时钟恢复需要一定的时间，才能保证时钟信号与数据信号的相位对应关系符合要求。一旦CDR完成了时钟的恢复，我们就说PCIe总线完成了位锁定。\n字符锁定（Symbol Lock）：\n完成了位锁定之后，只是能够准确地识别出数据流中的0和1，还是不知道发送的内容是个啥。对于Gen1\u0026amp;Gen2来说，采用的8b/10b编码，即传输的数据是以10bit为一个字符。LTSSM可以引导物理层相关逻辑通过识别COM（K28.5）等控制字符来确定每个字符的开始与结束为止，即字符锁定。\n链路宽度（Link Width）：\n由于PCIe允许将x1的PCIe卡插入x4、x8甚至是x16的PCIe插槽中。因此在链路训练与初始化过程中，相邻的两个PCIe设备需要相互通信来确定其支持的最大链路宽度。\n**注：**实际上PCIe Spec还允许采用动态带宽的机制，即允许链路宽度和数据率动态调整，以实现降低功耗等功能。\n通道位置翻转（Lane Reversal）：\n有的时候两个PCIe设备的通道排列位置可能不太一致，PCIe Spec允许对默认的通道排列位置重新排列，如下图所示。但是，从大部分的PCIe设备（PCIe卡和插槽等）都是按照统一的标准实现的，一般不会出现这种情况，因此这一功能是可选的。 - FAQ\nhttps://blog.csdn.net/u012158332/article/details/108902966\nReveral lane\n具体在Configuration阶段配置lane reversal,\nPolarity lane\n具体在LTSSM的polling轮训阶段\nPolling:\n这个阶段会进行train, bit对齐等。Polling.Active正式开始发送, 也就是所有lane会发送1024个TS1 order, 正常的话upstream/downstream都会收到连续的order, 那么就会进入config阶段\nPCIe测试 # 需要考虑的因素\n","date":"21 November 2024","externalUrl":null,"permalink":"/posts/pcie%E7%BB%93%E6%9E%84/","section":"Posts","summary":"","title":"PCIe结构","type":"posts"},{"content":"","date":"21 November 2024","externalUrl":null,"permalink":"/tags/serdes/","section":"Tags","summary":"","title":"SerDes","type":"tags"},{"content":"ChipScoPy is an open-source project from Xilinx® that enables high-level control of Versal debug IP running in hardware.\nUsing a simple Python API, developers can control and communicate with ChipScope® debug IP such as the Integrated Logic\nAnalyzer (ILA), Virtual IO (VIO), device memory access, and more.\nChipScoPy communicates with Versal devices. It does not work with older devices such as Ultrascale+ and 7-Series devices.\nChipScoPy Overview\nSystem Requirements\nChipScoPy Installation\nChipScoPy Examples\nFAQ\nAPI Documentation\n","date":"20 November 2024","externalUrl":null,"permalink":"/posts/%E8%B0%83%E8%AF%95%E7%A5%9E%E5%99%A8chipscopy-%E4%BD%BF%E7%94%A8python%E5%AE%8C%E6%88%90%E8%B0%83%E8%AF%95/","section":"Posts","summary":"","title":"ChipScoPy使用","type":"posts"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/tags/debug/","section":"Tags","summary":"","title":"Debug","type":"tags"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/categories/debug/","section":"Categories","summary":"","title":"Debug","type":"categories"},{"content":"","date":"20 November 2024","externalUrl":null,"permalink":"/tags/xilinx/","section":"Tags","summary":"","title":"Xilinx","type":"tags"},{"content":"�\nDebian中安装\nsshd,sfp\nPython\nclash for linux https://blog.iswiftai.com/posts/clash-linux/\nrime https://mp.weixin.qq.com/s?search_click_id=6850310186753593443-1736683265419-4488867332\u0026__biz=MzIwMjk1MjY1NA==\u0026mid=2247486480\u0026idx=1\u0026sn=9a546c1cf208a7233b35f46198bc7f47\u0026chksm=9759faad2cfa86490c82f67e59d195db1e95e4d16846cef6ba3acfc3581767176468e0d7bd9a\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683265\u0026enterid=1736683265\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683265442\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQ1y8GaZH2N%2FoKzG3F93rlWxLZAQIE97dBBAEAAAAAAHIxAL38yn4AAAAOpnltbLcz9gKNyK89dVj0oh30byj3I8fQJeeMp0fTM%2FYoCdelZWPQS3qsgUrC4HYhte9QcqYTwjCtsJTkENus3W1Tt5mVmVuTYsjUdjfmrPTunJGsYbIRkXqGcQq64hOS3uYAZc9pgwLjtNem2P%2Fe37vqhyHGTsE3NO9itKWBqXl9IAiZuXAhA96%2FuIPTTxsRFDIjIEBfSegtOr75TrpPpw%2BFE5Aor3nykW4wDuYG%2FGDHwAMcrfTGBf0IhY7aQZRzpVA%3D\u0026pass_ticket=0Mz9AZUaHynm%2BnJ%2BjR%2F7FyFxDl6RbrEuRSElOmtS%2FXvQje2opI6EdXGyMtoUbdmK\u0026wx_header=3\ndocker\nsamba 用于局域网的控制和文件 nextcloud用于个人网盘\n在连接外网之前,必要的安全措施 smap\n开机自启动的服务: sshd\nhttps://mp.weixin.qq.com/s?search_click_id=2250643312925649228-1736683545464-3202065459\u0026__biz=MzI3OTkyNDE4Ng==\u0026mid=2247484463\u0026idx=1\u0026sn=7d9fc172f393e0bd97c1827f047b25fc\u0026chksm=ea756bf516725d61dee443c0d8830456d2496d079609b9027c6d48c3b8c74f2a92d1eb5c558d\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683545\u0026enterid=1736683545\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683545501\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQr8e%2FpxjFIHa7Bsn9ktkNIRLZAQIE97dBBAEAAAAAANXIMuJx2xsAAAAOpnltbLcz9gKNyK89dVj0IfE8jTVbLlDE5YvrzgMhKt4PoMHqDqw6xyik6yMjII0Qk4IN1MUD3woM48%2BGR4T%2Bg6rR7Pb269ZqpB5xJ27kMhj8hzdXZclciIijQBAMP2hZalIkW%2F5ziFukyMWBIvFAmUSJLI2SQTAQByKB1cgBtYcxc1ZhdlqwXRFnRw0dGTSfafeCf%2F2wTFr%2BgVXZuaH0aegC0R%2F4G4tralnEIt6jcqUt00s%2Bvrax9dm0xa3OzNEO%2FEo%3D\u0026pass_ticket=I90AtL%2Bb5GT9AuD2wSGIvwocZK267UTpkfGmYvzsqzUojObBLtsDhEfMWvP7Rcn8\u0026wx_header=3\nhomeassist\nui设计 米家集成 海尔集成 https://mp.weixin.qq.com/s?search_click_id=13020888294339846515-1736683946068-7674839760\u0026__biz=MzIwNjA2Mzk1MA==\u0026mid=2648622027\u0026idx=1\u0026sn=a681bb6a6a36edcdcd35befd70d2c70a\u0026chksm=8e1898e4513c17794a9fe4a653e29ab3f2380b0994994ed49f4a81154e1d2d9d7f6cd869a87a\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683946\u0026enterid=1736683946\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683946092\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQvzz9fGttxlVGOJ6dC0V89RLZAQIE97dBBAEAAAAAAPoKLkOHAjkAAAAOpnltbLcz9gKNyK89dVj0LZE38KJHrZJiP2uXnjOoj3WapMFLWyCx08xlEar%2FB4v3jisld6rDgJJc1CXlTI11FtLZ%2BSt7URG6X0ZRO83DNoLPcHnjU%2FFa39zV9khrQYsZDt37ZYQI6qtql4e8Do0ZqTIC9uLt%2FTOBA38BXjjHRZIzHbhLmqQhMbvbyOsIW9o1TeF6Y4wHw%2FuCnImnvwd9XGc%2FcMoPqb4pQQvrvCaAXiT6uitmigKKXogZC0lbprXIpow%3D\u0026pass_ticket=QV%2FQZ1SiTVU0BbWBRMd4vlDufXcLqVUPVezGx6AFhDkX7zbN7qPdNW5SKQET3EE%2B\u0026wx_header=3\n美的集成\n局域网网络布局设计\n进阶: 系统备份\n","externalUrl":null,"permalink":"/draft/1737773013880_nas/","section":"Drafts","summary":"","title":"","type":"draft"},{"content":"�\nDebian中安装\nsshd,sfp\nPython\nclash for linux https://blog.iswiftai.com/posts/clash-linux/\nrime https://mp.weixin.qq.com/s?search_click_id=6850310186753593443-1736683265419-4488867332\u0026__biz=MzIwMjk1MjY1NA==\u0026mid=2247486480\u0026idx=1\u0026sn=9a546c1cf208a7233b35f46198bc7f47\u0026chksm=9759faad2cfa86490c82f67e59d195db1e95e4d16846cef6ba3acfc3581767176468e0d7bd9a\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683265\u0026enterid=1736683265\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683265442\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQ1y8GaZH2N%2FoKzG3F93rlWxLZAQIE97dBBAEAAAAAAHIxAL38yn4AAAAOpnltbLcz9gKNyK89dVj0oh30byj3I8fQJeeMp0fTM%2FYoCdelZWPQS3qsgUrC4HYhte9QcqYTwjCtsJTkENus3W1Tt5mVmVuTYsjUdjfmrPTunJGsYbIRkXqGcQq64hOS3uYAZc9pgwLjtNem2P%2Fe37vqhyHGTsE3NO9itKWBqXl9IAiZuXAhA96%2FuIPTTxsRFDIjIEBfSegtOr75TrpPpw%2BFE5Aor3nykW4wDuYG%2FGDHwAMcrfTGBf0IhY7aQZRzpVA%3D\u0026pass_ticket=0Mz9AZUaHynm%2BnJ%2BjR%2F7FyFxDl6RbrEuRSElOmtS%2FXvQje2opI6EdXGyMtoUbdmK\u0026wx_header=3\ndocker\nsamba 用于局域网的控制和文件 nextcloud用于个人网盘\n在连接外网之前,必要的安全措施 smap\n开机自启动的服务: sshd\nhttps://mp.weixin.qq.com/s?search_click_id=2250643312925649228-1736683545464-3202065459\u0026__biz=MzI3OTkyNDE4Ng==\u0026mid=2247484463\u0026idx=1\u0026sn=7d9fc172f393e0bd97c1827f047b25fc\u0026chksm=ea756bf516725d61dee443c0d8830456d2496d079609b9027c6d48c3b8c74f2a92d1eb5c558d\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683545\u0026enterid=1736683545\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683545501\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQr8e%2FpxjFIHa7Bsn9ktkNIRLZAQIE97dBBAEAAAAAANXIMuJx2xsAAAAOpnltbLcz9gKNyK89dVj0IfE8jTVbLlDE5YvrzgMhKt4PoMHqDqw6xyik6yMjII0Qk4IN1MUD3woM48%2BGR4T%2Bg6rR7Pb269ZqpB5xJ27kMhj8hzdXZclciIijQBAMP2hZalIkW%2F5ziFukyMWBIvFAmUSJLI2SQTAQByKB1cgBtYcxc1ZhdlqwXRFnRw0dGTSfafeCf%2F2wTFr%2BgVXZuaH0aegC0R%2F4G4tralnEIt6jcqUt00s%2Bvrax9dm0xa3OzNEO%2FEo%3D\u0026pass_ticket=I90AtL%2Bb5GT9AuD2wSGIvwocZK267UTpkfGmYvzsqzUojObBLtsDhEfMWvP7Rcn8\u0026wx_header=3\nhomeassist\nui设计 米家集成 海尔集成 https://mp.weixin.qq.com/s?search_click_id=13020888294339846515-1736683946068-7674839760\u0026__biz=MzIwNjA2Mzk1MA==\u0026mid=2648622027\u0026idx=1\u0026sn=a681bb6a6a36edcdcd35befd70d2c70a\u0026chksm=8e1898e4513c17794a9fe4a653e29ab3f2380b0994994ed49f4a81154e1d2d9d7f6cd869a87a\u0026scene=7\u0026subscene=10000\u0026sessionid=1736679969\u0026clicktime=1736683946\u0026enterid=1736683946\u0026ascene=65\u0026fasttmpl_type=0\u0026fasttmpl_fullversion=7552171-zh_CN-zip\u0026fasttmpl_flag=0\u0026realreporttime=1736683946092\u0026devicetype=android-34\u0026version=2800373b\u0026nettype=cmnet\u0026abtest_cookie=AAACAA%3D%3D\u0026lang=zh_CN\u0026countrycode=CN\u0026exportkey=n_ChQIAhIQvzz9fGttxlVGOJ6dC0V89RLZAQIE97dBBAEAAAAAAPoKLkOHAjkAAAAOpnltbLcz9gKNyK89dVj0LZE38KJHrZJiP2uXnjOoj3WapMFLWyCx08xlEar%2FB4v3jisld6rDgJJc1CXlTI11FtLZ%2BSt7URG6X0ZRO83DNoLPcHnjU%2FFa39zV9khrQYsZDt37ZYQI6qtql4e8Do0ZqTIC9uLt%2FTOBA38BXjjHRZIzHbhLmqQhMbvbyOsIW9o1TeF6Y4wHw%2FuCnImnvwd9XGc%2FcMoPqb4pQQvrvCaAXiT6uitmigKKXogZC0lbprXIpow%3D\u0026pass_ticket=QV%2FQZ1SiTVU0BbWBRMd4vlDufXcLqVUPVezGx6AFhDkX7zbN7qPdNW5SKQET3EE%2B\u0026wx_header=3\n美的集成\n局域网网络布局设计\n进阶: 系统备份\n","externalUrl":null,"permalink":"/draft/nas/","section":"Drafts","summary":"","title":"","type":"draft"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/draft/","section":"Drafts","summary":"","title":"Drafts","type":"draft"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]